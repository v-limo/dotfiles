" Base Settings
set scrolloff=10
set number
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell
set clipboard+=unnamed
set notimeout
set commentary
" set surround
set highlightedyank
set sneak
set NERDTree
set quickscope
set easymotion
set textobj-entire
set which-key

" Leader key
let mapleader = " "

" Escape using 'jk' in insert mode
inoremap jk <Esc>

" Center to focus
nnoremap { {zz
nnoremap } }zz
nnoremap n nzz
nnoremap N Nzz
nnoremap G Gzz
nnoremap i zzi
nnoremap I zzI
nnoremap o zzo
nnoremap O zzO
nnoremap a zza
nnoremap A zzA
nnoremap s zzs
nnoremap S zzS
nnoremap c zzc
nnoremap C zzC
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Code completion
map <C-n> <Action>(HippieCompletion)
map <C-p> <Action>(HippieBackwardCompletion)

" Popup navigation - the name could be a better name.
map <C-x> <Action>(ShowHoverInfo)
map <C-e> <Action>(ShowErrorDescription)

" Popup navigation
map <C-j> <Action>(PopupMenu-selectNext)
map <C-k> <Action>(PopupMenu-selectPrev)


" Tab navigation
nnoremap <C-n> :TabNext<CR>
nnoremap <C-p> :TabPrev<CR>
nmap <Tab> <Action>(NextTab)


" Location navigation
nmap <C-i> <Action>(Back)
nmap <C-o> <Action>(Forward)
map g; <Action>(JumpToLastChange)
map g, <Action>(JumpToNextChange)
map ; <Action>(ActivateTerminalToolWindow)


" NERDTree Settings
map <C-t> :NERDTreeFocus<CR>
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'

" Add space when pressing Enter in normal mode
nnoremap <CR> o<Esc>

" Pane navigation on Mac
nnoremap <D-h> <C-w>h
nnoremap <D-l> <C-w>l
nnoremap <D-k> <C-w>k
nnoremap <D-j> <C-w>j

" Navigation
map H ^
map L $
map J }
map K {


" Folding
nmap zz <Action>(ExpandCollapseToggleAction)
nmap za <Action>(CollapseAllRegions)
nmap zA <Action>(ExpandAllRegions)


" After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap p "_dP`]
nnoremap p p`]


" Yanking, Deleting, Cutting Configuration
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p


" Yank Word
nmap ,c yiw


" Select word
vnoremap y ygv<Esc>

" Moving this to test....
nmap Y y$

" Formatting
map = <action>(ReformatCode)

" Jump between methods
nmap [ <Action>(MethodUp)
nmap ] <Action>(MethodDown)


" Easy visual indentation
vnoremap < <gv
vnoremap > >gv


" Move code up and down
vnoremap <D-j> :m'>+<CR>gv=gv
nnoremap <D-j> :m+<CR>==
inoremap <D-k> <Esc>:m-2<CR>==gi
nnoremap <D-k> :m-2<CR>==
inoremap <D-j> <Esc>:m+<CR>==gi
vnoremap <D-k> :m-2<CR>gv=gv

" Actions
map <leader>a <action>(ShowIntentionActions)

" Buffer management
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <leader>bd :bd<CR>

" Comment
map <leader>c <action>(CommentByLineComment)

" Macro Mappings
nnoremap <leader>mr q
nnoremap <leader>mp @q
nnoremap <leader>mv :registers<CR>

" Close Tabs
map <leader>qq <action>(CloseContent)
map <leader>qa <action>(CloseAllEditors)
map <leader>qo <Action>(CloseAllEditorsButActive)
map <leader>qp <Action>(CloseAllUnpinnedEditors)

" Window splits
map <leader>wv  <Action>(SplitVertically)
map <leader>ws  <Action>(SplitHorizontally)
map <leader>wu  <Action>(Unsplit)
map <leader>wm  <Action>(MoveEditorToOppositeTabGroup)
map <leader>wh  <Action>(MoveWindowLeft)
map <leader>wj  <Action>(MoveWindowDown)
map <leader>wk  <Action>(MoveWindowUp)
map <leader>wl  <Action>(MoveWindowRight)
map <leader>ww <Action>(HideAllWindows)
map <leader>wa <Action>(UnsplitAll)

" Search and Replace
nnoremap <Esc> :nohlsearch<CR>:let @/=""<CR>
nnoremap <leader>sr :%s//g<Left><Left>
nnoremap <leader>sw :%s/\<C-r><C-w>\///g<Left><Left>
vnoremap <leader>sw :s/\%V\<C-r><C-w>\///g<Left><Left>
nnoremap <leader>sc :%s//g|c<Left><Left><Left>
noremap <leader>swc :%s/\<C-r><C-w>\///gc<Left><Left>
vnoremap <leader>swc :s/\%V\<C-r><C-w>\///gc<Left><Left>

" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)
nmap <leader>ed <action>(ShowErrorDescription)
nmap <leader>ee <action>(ShowErrorDescription)

" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gb <Action>(Forward)
nmap <leader>gf <Action>(Back)

" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" New element
nmap <leader>nn <Action>(NewElement)
nmap <leader>nf <Action>(NewFile)
nmap <leader>nd <Action>(NewDir)
nmap <leader>nc <Action>(NewClass)
nmap <leader>nm <Action>(NewModule)
nmap <leader>np <Action>(NewProject)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Terminal
nmap <leader>tt <Action>(ActivateTerminalToolWindow)
nmap <leader>tc <Action>(Terminal.OpenInTerminal)

" Select All
nnoremap <leader>va :normal ggVG<CR>

" Which-key configuration
let g:WhichKey_FontSize = 12
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_bookmark = "<leader>b Toggle Bookmark"

let g:WhichKeyDesc_comment = "<leader>c Comment"

let g:WhichKeyDesc_display = "<leader>d Display"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle ZenMode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle FullScreen"

let g:WhichKeyDesc_open_nerdtree = "<leader>ee Open NERDTree"
let g:WhichKeyDesc_errors = "<leader>e Errors"
let g:WhichKeyDesc_errors_next = "<leader>en Next Error"
let g:WhichKeyDesc_errors_prev = "<leader>ep Previous Error"

let g:WhichKeyDesc_file_nav = "<leader>f File Navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to File"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Recent Files"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Find in Path"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Recent Locations"
let g:WhichKeyDesc_file_scratch = "<leader>fs New Scratch File"

let g:WhichKeyDesc_goto = "<leader>g Go to Code"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Declaration"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Show Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_git = "<leader>g Git Windows"
let g:WhichKeyDesc_git_commit = "<leader>gc Checkin Project"
let g:WhichKeyDesc_git_status = "<leader>gs Activate Version Control Tool Window"
let g:WhichKeyDesc_git_branches = "<leader>gb Git Branches"

let g:WhichKeyDesc_easymotion = "<leader>j Jump Easymotion"


let g:WhichKeyDesc_macros = "<leader>m Macros"
let g:WhichKeyDesc_macros_record = "<leader>mr Record Macro"
let g:WhichKeyDesc_macros_playback = "<leader>mp Playback Macro"
let g:WhichKeyDesc_macros_view = "<leader>mv View Macros"

let g:WhichKeyDesc_new = "<leader>n Create New"
let g:WhichKeyDesc_new_element = "<leader>ne New Element"
let g:WhichKeyDesc_new_file = "<leader>nf New File"
let g:WhichKeyDesc_new_dir = "<leader>nd New Directory"
let g:WhichKeyDesc_new_class = "<leader>nc New Class"
let g:WhichKeyDesc_new_module = "<leader>nm New Module"
let g:WhichKeyDesc_new_project = "<leader>np New Project"

let g:WhichKeyDesc_close_tab = "<leader>q Close Tabs"
let g:WhichKeyDesc_close_tab_close_content = "<leader>qq Close Content"
let g:WhichKeyDesc_close_tab_close_all_editors = "<leader>qa Close All Editors"
let g:WhichKeyDesc_close_tab_close_all_but_active = "<leader>qo Close All Editors But Active"
let g:WhichKeyDesc_close_tab_close_all_unpinned_editors = "<leader>qp Close All Unpinned Editors"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename Element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract Method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce Variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce Field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change Signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Quick List Popup Action"

let g:WhichKeyDesc_search_replace = "<leader>s Search and Replace"
let g:WhichKeyDesc_clear_search = "<Esc> Clear Search Highlights"
let g:WhichKeyDesc_search_replace_global = "<leader>sr Replace Globally"
let g:WhichKeyDesc_search_replace_word = "<leader>sw Replace Word"
let g:WhichKeyDesc_search_replace_confirm = "<leader>sc Replace with Confirmation"
let g:WhichKeyDesc_search_replace_word_confirm = "<leader>swc Replace Word with Confirmation"

let g:WhichKeyDesc_terminal = "<leader>t Terminal"
let g:WhichKeyDesc_terminal_activate = "<leader>tt Terminal Window"
let g:WhichKeyDesc_terminal_open = "<leader>tc Open in Terminal"

let g:WhichKeyDesc_window = "<leader>w Window Splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split Vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>ws Split Horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move Editor to Opposite Tab Group"
let g:WhichKeyDesc_window_hide_all = "<leader>ww Hide All Windows"
let g:WhichKeyDesc_window_unsplit_all = "<leader>wa Unsplit All"

let g:WhichKeyDesc_tests = "<leader>tr Run Tests"

let g:WhichKeyDesc_select_all = "<leader>va Select All"
